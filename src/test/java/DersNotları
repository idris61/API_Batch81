    API DERSİNDE NELER ÖĞRENECEKSİNİZ?

* POSTMAN

* Rest Assured: REST API'lerini test etmek ve doğrulamak için kullanılan
                Open Source (Açık Kaynak) bir Java kütüphanesidir.

    1- Postman'i , manuel API testleri icin kullandik
    2- Otomasyon testleri icin de Rest Assuret Librariy kullanacagiz
    3- Otomasyon testlerimizi yaparken asagidaki adimlari izliyoruz
        a) Gereksinimleri anlamak,
        b) Test Case yaziyoruz
            i) Test Case yaziminda Gherkin dilini kullanacagiz. Bizler yazilim diline hakim olsak da
                karsimizdaki kisiler hakim olmayabilir ama Gherkin ile yazilan testleri anlamakta zorluk cekmeyeceklerdir.
                Gherkin dilinde kullanacagimiz keywordler;

                - Given : On kosullar
                - When  : Yapilacak aksiyonlar icin (get(), put(), post(), patch() ve delete() )
                - Then  : Istek yaptiktan (request gonderdikten sonra) dogrulama
                - And   : Coklu islemlerde kullanacagiz

        c) Test kodlarimizi yazmaya baslayacagiz

            i)  Set the URL,
            ii) Set the expected Data (beklenen datanin olusturulmasi, post, put, patch)
            iii) Type code to send request (Talep gondermek icin kod yazimi)
            iv) Do Assertion ()dogrulama yapmak

        // given().when().get(url); ==> end point'e göndermek için request oluşturmuş olduk.
        // Response response ==> api tarafından bize dönen response

        // Response response = given().auth().basic("username", "password").when().get(url);
        // basic auth ile request göndermek için

        // response.prettyPrint(); ==> body i json olarak yazdırır.

        // response.prettyPeeks(); ==> tüm veriyi json olarak yazdırır.(başlıklarla birlikte)

        // response.peek(); ==> tüm veriyi string olarak verir.

        // response.print(); ==> sadce bodyi string olarak yazdırır


* Matchers Class kullanarak doğrulama
  http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html

  Matchers.equalto(): Key-Value şeklinde girilen datanın, eşit olduğunu doğrulamak için kullanılır.
  Matchers.hasSize(): Datanın size'ını doğrulamak için kullanılır.
  Matchers.hasItem(): Girilen tek bir data'yı doğrulamak için kullanılır.
  Matchers.hasItems(): Girilen birden fazla datayı doğrulamak için kullanılır.
            Örnek:
            And
               There should be 200 todos
            And
               "quis eius est sint explicabo" should be one of the todos title
            And
               2, 7, and 9 should be among the userIds

            // 4-Do Assertion
            response.then().
                    assertThat().
                    statusCode(200).
                    contentType("application/json").
                    body("id",hasSize(200),
                            "title",hasItem("quis eius est sint explicabo"),
                            "userId",hasItems(2,7,9));

            ---------
            2. Yol : Jsonpath class'nın kullanimi
            JsonPath json = response.jsonPath();

            assertEquals("Bradley", json.getString("firstname"));
            assertEquals(111, jsonPath.getInt("totalprice"));
            assertTrue(jsonPath.getBoolean("depositpaid"));
            ---------
            // 3. Yol : SoftAssert
               // softAssert class 3 adimda kullanilir

               // i) Obje olusturma
               SoftAssert softAssert = new SoftAssert();

               // ii) Do Assertion ( dogrulama Yapma)
               softAssert.assertEquals(json.getString("firstname"), "Bradley", "First Name Hatali");
               softAssert.assertEquals(json.getString("lastname"), "Pearson", "Last Name Hatali");

               softAssert.assertAll();

               // iii) Dogrulama islemleri sonunda softAssert.assertAll() diyerek yaptigimiz tum dogrulama islemlerinin kontrol edilmesini
                       sagliyoruz.
                       Eger islemin sonunda softAssert.assertAll() kullanmaz isek taleplerimiz hatalı bile olsa testimiz pass olacaktir.


* JUnit ve TestNG Assert'leri kullanılarak doğrulama

* Json Path kullanarak doğrulama
    JsonPath() json = response.JsonPath();

* De-Serialization: JSON formatını Javaya dönüştürme
    Map<String, Object> actualData = response.as(HashMap.class);

* Serialization: Java yapısında olan dataları JSON'a dönüştürme
    Gson gson = new Gson();
    String jsonFromJava = gson.toJson(actual);

* JSON Object
    JsonPlaceHolderTestData testObje = new JsonPlaceHolderTestData();
    JSONObject expectedRequest = testObje.setUpPostData();

* Pojo Class (Plain Old Java Object)

* ObjectMapper: JSON ve POJO (Plain Old Java Objects) okuma ve yazma işlevlerinin yanı sıra
    dönüştürmeleri gerçekleştirmek için de kullanılır.

* API den alınan response'ları bilgisayara text dosyası olarak kaydetme ve doğrulama yapma.

-----------------------------------------------------------------------------------------------

1) API testlerinde Web Driver kullanıyor musunuz? Hangi dependencies'leri kullanıyorsunuz?
   API testlerinde, UI testleri için gerekli Web Driver'a ihtiyaç yoktur.
   Başlangıç için Rest-Assured veye JUnit ve TestNG gibi dependencies'ler yeterli olur.

2) Doğrulama için kullanılan, Hard Assert ve Verification farkları nelerdir?
   Hard Assert kullandığımızda ilk hata olan yerde test durur.
   Verification'da; testler hata olsa dahi çalışır. Hatalı olan test için hata mesajı alınır.
   ÖNEMLİ: Soft Assert = Verification

3) API testlerinde request nasıl tanımlanır?
   given().when().get() içerisinde tanımlanır.

4) Request'ten gelen cevap (response) nerede saklanır?
   Response response'un içerisinde.

5) assertThat() Hard mı yoksa Soft Assert müdür?
   assertThat() Hard assertion'dır.


TEST iÇiN KULLANILAN ADRESLER

https://restful-booker.herokuapp.com/booking

https://reqres.in/api/users

http://dummy.restapiexample.com/api/v1/employee

https://jsonplaceholder.typicode.com/

https://www.gmibank.com/api/authenticate

http://www.gmibank.com/api/tp-customers